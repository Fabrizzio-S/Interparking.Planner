@model Interparking.Planner.ViewModels.RouteEditViewModel

<form asp-action="Resume" method="post" class="form-horizontal" role="form">
    <div class="container">
        <div class="row form-group">
            <div class="col-lg-12">
                @*<label asp-for="Route.Name" class="control-label"></label>*@
                <input asp-for="Route.Name" class="form-control" placeholder="Nom de la route" />
                <span asp-validation-for="Route.Name" class="text-danger"></span>

                <input type="hidden" asp-for="Route.Id" />
                <input id="RouteStartPointLatitude" type="hidden" asp-for="Route.StartPoint.Latitude" />
                <input id="RouteStartPointLongitude" type="hidden" asp-for="Route.StartPoint.Longitude" />
                <input id="RouteEndPointLatitude" type="hidden" asp-for="Route.EndPoint.Latitude" />
                <input id="RouteEndPointLongitude" type="hidden" asp-for="Route.EndPoint.Longitude" />
                <input id="RouteWayPoints" type="hidden" asp-for="Route.WayPoints" />
            </div>
        </div>
        <div class="row">
            <div id="map" style="height:400px;width:100%;"></div>
        </div>
        <div class="row form-group">
            <div class="col-lg-12">
                <input type="submit" class="btn btn-primary" value="Sauver" />
            </div>
        </div>
    </div>
</form>


@section Scripts{
    <environment include="Development">
        <script src="https://maps.googleapis.com/maps/api/js?key=@Configuration["GoogleApiKey"]"></script>
    </environment>
    <environment exclude="Development">

    </environment>
    <script>
        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer({
            draggable: true,
            directions_changed: saveRoute
        });

        var map = new google.maps.Map(document.getElementById('map'));
        directionsRenderer.setMap(map);
        var savedRoute = @Html.Raw(Json.Serialize(Model.Route));

        showSavedRoute();

        function showSavedRoute() {
            var wayPoints = [];
            if (savedRoute.wayPoints) {
                for (var i = 0; i < savedRoute.wayPoints.length; i++) {
                    wayPoints[i] = { 'location': new google.maps.LatLng(savedRoute.wayPoints[i].latitude, savedRoute.wayPoints[i].longitude), 'stopover': false }
                }
            }

            directionsService.route({
                'origin': new google.maps.LatLng(savedRoute.startPoint.latitude, savedRoute.startPoint.longitude),
                'destination': new google.maps.LatLng(savedRoute.endPoint.latitude, savedRoute.endPoint.longitude),
                'waypoints': wayPoints,
                'travelMode': google.maps.DirectionsTravelMode.DRIVING
            }, function (response, status) {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                    }
                    else {
                        window.alert('Directions request failed due to ' + status);
                    }
            })
        }

        function saveRoute() {
            var leg = directionsRenderer.directions.routes[0].legs[0];
            document.getElementById('RouteStartPointLatitude').value = leg.start_location.lat();
            document.getElementById('RouteStartPointLongitude').value = leg.start_location.lng();
            document.getElementById('RouteEndPointLatitude').value = leg.end_location.lat()
            document.getElementById('RouteEndPointLongitude').value = leg.end_location.lng()

            var wayPoints = [];
            var legWaypoints = leg.via_waypoints
            for (var i = 0; i < legWaypoints.length; i++) {
                wayPoints[i] = { 'latitude': legWaypoints[i].lat(), 'longitude': legWaypoints[i].lng() }
            }

            document.getElementById('RouteWayPoints').value = JSON.stringify(wayPoints);
        }
    </script>
}